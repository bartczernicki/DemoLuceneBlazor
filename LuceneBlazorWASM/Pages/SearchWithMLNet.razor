@page "/searchwithmlnet"

@inject LuceneIndexService luceneIndex

<link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />

<h1>Search (Information Retrieval) with ML.NET</h1>
<p>Number of Lucene Docs (player records) in Index: @currentCount</p>

<BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                   @bind-Value="@SelectedBatter"
                   Debounce="150" MaximumSuggestions="50"
                   EnableDropDown="true" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </SelectedTemplate>
    <ResultTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any baseball players found.
    </NotFoundTemplate>
</BlazoredTypeahead>

<table class="table">
    <thead>
        <tr>
            <th>FullPlayerName</th>
            <th>YearsPlayed</th>
            <th>LastYearPlayed</th>
            <th>H</th>
            <th>HRs</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in players)
        {
            <tr>
                <td>@player.FullPlayerName</td>
                <td>@player.YearsPlayed</td>
                <td>@player.LastYearPlayed</td>
                <td>@player.H</td>
                <td>@player.HR</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<MLBBaseballBatter> players = new List<MLBBaseballBatter>(100);

    private int currentCount = 0;
    private int searchCount = 0;
    private string SearchString = string.Empty;
    private MLBBaseballBatter _selectedBatter;

    private DirectoryReader indexReader;
    private IndexSearcher searcher;

    StandardAnalyzer analyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);

    NumericRangeQuery<int> queryRangedMaxRecords = NumericRangeQuery.NewInt32Range("IsBatterMaxYearsRecord", 1, 1, true, true);
    NumericRangeQuery<float> queryRangedLongerYearsRecords = NumericRangeQuery.NewSingleRange("YearsPlayed", 21f, 30f, true, true);

    public MLBBaseballBatter SelectedBatter
    {
        get { return _selectedBatter; }
        set
        {
            if (value != null)
            {
                _selectedBatter = value;
                Console.WriteLine("Selected Batter: " + _selectedBatter.FullPlayerName);
            }
        }
    }

    protected override void OnInitialized()
    {
        this.indexReader = luceneIndex.IndexReader;
        this.searcher = new IndexSearcher(indexReader);

        currentCount = indexReader.NumDocs;

        this.SelectedBatter = new MLBBaseballBatter { FullPlayerName = "Mike Trout", YearsPlayed = 9, LastYearPlayed = 2019 };

        base.OnInitialized();
    }

    private void PerformSearch()
    {
        players = new List<MLBBaseballBatter>();

        Console.WriteLine("Open Index");

        var analyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);

        BooleanQuery andQuery = new BooleanQuery();
        andQuery.Add(queryRangedMaxRecords, Occur.MUST);
        andQuery.Add(queryRangedLongerYearsRecords, Occur.MUST);
        //andQuery.Add(query, Occur.MUST);

        var searchResults = searcher.Search(andQuery, 300);
        var hits = searchResults.ScoreDocs;

        //var searchResults = searcher.Search(andQuery, 500);

        this.searchCount = hits.Length;

        foreach (var hit in hits)
        {
            var foundDoc = searcher.Doc(hit.Doc);
            var yearsPlayed = foundDoc.GetField("YearsPlayed").GetSingleValue();

            //if (yearsPlayed > 100)
            //{
            var name = foundDoc.GetField("FullPlayerName").GetStringValue();
            var lastYearPlayed = foundDoc.GetField("LastYearPlayed").GetSingleValue();

            var player = new MLBBaseballBatter { FullPlayerName = name, YearsPlayed = (int)yearsPlayed, LastYearPlayed = (int)lastYearPlayed };
            players.Add(player);
            //}

            //var explanation = searcher.Explain(query, hit.Doc);

            //Console.WriteLine("Found: " + name + " - " + hit.Score);
            //Console.WriteLine("Explanation: " + explanation.ToString());

            //var score = hit.Score;
        }
    }

    private async Task<IEnumerable<MLBBaseballBatter>> SearchBaseballPlayers(string searchText)
    {
        var baseBallPlayers = new List<MLBBaseballBatter>();

        BooleanQuery andQuery = new BooleanQuery();

        if (String.IsNullOrEmpty(searchText))
        {
            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(queryRangedLongerYearsRecords, Occur.MUST);
        }
        else
        {
            QueryParser fullPlayerNameParser = new QueryParser(Lucene.Net.Util.LuceneVersion.LUCENE_48, "FullPlayerName", analyzer);
            var query = fullPlayerNameParser.Parse(searchText + "*");

            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(query, Occur.MUST);
        }

        var searchResults = searcher.Search(andQuery, 50);
        var hits = searchResults.ScoreDocs;

        foreach (var hit in hits)
        {
            var document = searcher.Doc(hit.Doc);

            var mlbBaseballBatter = new MLBBaseballBatter
            {
                ID = document.GetField("Id").GetStringValue(),
                FullPlayerName = document.GetField("FullPlayerName").GetStringValue(),
                YearsPlayed = (float)document.GetField("YearsPlayed").GetSingleValue(),
                AB = (float)document.GetField("AB").GetSingleValue(),
                R = (float)document.GetField("R").GetSingleValue(),
                H = (float)document.GetField("H").GetSingleValue(),
                Doubles = (float)document.GetField("Doubles").GetSingleValue(),
                Triples = (float)document.GetField("Triples").GetSingleValue(),
                HR = (float)document.GetField("HR").GetSingleValue(),
                RBI = (float)document.GetField("RBI").GetSingleValue(),
                SB = (float)document.GetField("SB").GetSingleValue(),
                BattingAverage = (float)document.GetField("BattingAverage").GetSingleValue(),
                SluggingPct = (float)document.GetField("SluggingPct").GetSingleValue(),
                AllStarAppearances = (float)document.GetField("AllStarAppearances").GetSingleValue(),
                MVPs = (float)document.GetField("MVPs").GetSingleValue(),
                TripleCrowns = (float)document.GetField("TripleCrowns").GetSingleValue(),
                GoldGloves = (float)document.GetField("GoldGloves").GetSingleValue(),
                MajorLeaguePlayerOfTheYearAwards = (float)document.GetField("MajorLeaguePlayerOfTheYearAwards").GetSingleValue(),
                TB = (float)document.GetField("TB").GetSingleValue(),
                TotalPlayerAwards = (float)document.GetField("TotalPlayerAwards").GetSingleValue(),
                LastYearPlayed = (float)document.GetField("LastYearPlayed").GetSingleValue()
            };

            baseBallPlayers.Add(mlbBaseballBatter);
        }

        this.players = baseBallPlayers.OrderByDescending(a => a.YearsPlayed).Select(a => a).ToList();
        return await Task.FromResult(this.players);
    }
}
