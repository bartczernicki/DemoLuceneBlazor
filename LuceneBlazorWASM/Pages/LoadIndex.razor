@page "/LoadIndex"

@inject LuceneIndexService luceneIndex

<strong class="form-text">Lucene Index Metadata</strong>
<small class="form-text text-muted"><b>Lucene Index Version: </b>@version</small>
<small class="form-text text-muted"><b>Number of Lucene Docs (player records) in Index: </b>@currentCount</small>
<br/>
<small class="form-text text-muted"><b>Index Field Structure...</b></small>

@if (fields != null)
{
    <table class="table">
        <thead>
            <tr>
                <th><small class="form-text text-muted"><b>Field Name</b></small></th>
                <th><small class="form-text text-muted"><b>Indexable Field Type</b></small></th>
                <th><small class="form-text text-muted"><b>Numeric Type</b></small></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var field in fields)
            {
                <tr>
                    <td><small class="form-text text-muted">@field.Name</small></td>
                    <td><small class="form-text text-muted">@field.IndexableFieldType</small></td>
                    <td><small class="form-text text-muted">@field.NumericType</small></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DirectoryReader indexReader;
    private IndexSearcher searcher;
    private IList<IIndexableField> fields;

    private string version = string.Empty;
    private int currentCount = 0;

    protected override void OnInitialized()
    {
        this.indexReader = luceneIndex.IndexReader;
        this.searcher = new IndexSearcher(indexReader);

        currentCount = indexReader.NumDocs;
        version = indexReader.Version.ToString();

        var document = this.indexReader.Document(1);
        this.fields = document.Fields;

        base.OnInitialized();
    }
}
