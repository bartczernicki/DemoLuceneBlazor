@page "/search"

<link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" />

<h1>Lucene Search</h1>

@*<p>Number of Lucene Docs in Index: @currentCount</p>
<input type="text" @bind="@SearchString" />
<p>Number of Search Results: @searchCount</p>*@

<BlazoredTypeahead SearchMethod="@SearchBaseballPlayers"
                   @bind-Value="@SelectedBatter"
                   Debounce="150" MaximumSuggestions="50"
                   EnableDropDown="true" ShowDropDownOnFocus="true">
    <SelectedTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </SelectedTemplate>
    <ResultTemplate>
        <b>@context.FullPlayerName - &nbsp;</b> (Years Played: @context.YearsPlayed, Last Season Played: @context.LastYearPlayed-@(context.LastYearPlayed + 1))
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any baseball players found.
    </NotFoundTemplate>
</BlazoredTypeahead>

@*<button class="btn btn-primary" @onclick="PerformSearch">Search</button>*@
@*<table class="table">
    <thead>
        <tr>
            <th>FullPlayerName</th>
            <th>YearsPlayed</th>
            <th>Hits</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in players)
        {
            <tr>
                <td>@player.FullPlayerName</td>
                <td>@player.YearsPlayed</td>
                <td>@player.Hits</td>
            </tr>
        }
    </tbody>
</table>*@

@code {
    private List<BaseballPlayer> players = new List<BaseballPlayer>(100);

    private int currentCount = 0;
    private int searchCount = 0;
    private string SearchString = string.Empty;
    private BaseballPlayer _selectedBatter;

    private DirectoryReader indexReader;
    private IndexSearcher searcher;

    StandardAnalyzer analyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);

    NumericRangeQuery<int> queryRangedMaxRecords = NumericRangeQuery.NewInt32Range("IsBatterMaxYearsRecord", 1, 1, true, true);
    NumericRangeQuery<float> queryRangedLongerYearsRecords = NumericRangeQuery.NewSingleRange("YearsPlayed", 21f, 30f, true, true);

    public BaseballPlayer SelectedBatter
    {
        get { return _selectedBatter; }
        set
        {
            if (value != null)
            {
                _selectedBatter = value;
                Console.WriteLine("Selected Batter: " + _selectedBatter.FullPlayerName);
            }
        }
    }

    protected override void OnInitialized()
    {
        var assembly = typeof(LuceneBlazorWASM.Pages.Index).Assembly;

        // var resources = assembly.GetManifestResourceNames();

        this.SelectedBatter = new BaseballPlayer { FullPlayerName = "Mike Trout", YearsPlayed = 9, LastYearPlayed = 2019 };

        Stream resource = assembly.GetManifestResourceStream($"LuceneBlazorWASM.LuceneIndex.LuceneIndex.zip");
        Console.WriteLine("Retrieved Stream");

        var indexPath = Path.Combine(Environment.CurrentDirectory, "LuceneIndex.zip");
        Console.WriteLine("Retrieved Stream");

        var fileStream = File.Create(indexPath);
        Console.WriteLine("Created file stream");

        resource.CopyTo(fileStream);
        Console.WriteLine("Copied To Stream");

        ZipFile.ExtractToDirectory(indexPath, Environment.CurrentDirectory, true);
        Console.WriteLine("Extracted index to dir");

        var zipDirectory = FSDirectory.Open(Environment.CurrentDirectory);
        Console.WriteLine("Open Index Dir");

        this.indexReader = DirectoryReader.Open(zipDirectory);
        this.searcher = new IndexSearcher(indexReader);

        currentCount = indexReader.NumDocs;

        base.OnInitialized();
    }

    private void PerformSearch()
    {
        players = new List<BaseballPlayer>();

        Console.WriteLine("Open Index");

        var analyzer = new StandardAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48);
        //QueryParser parser = new QueryParser(Lucene.Net.Util.LuceneVersion.LUCENE_48, "FullPlayerName", analyzer);
        //var query = parser.Parse(this.SearchString);

        BooleanQuery andQuery = new BooleanQuery();
        andQuery.Add(queryRangedMaxRecords, Occur.MUST);
        andQuery.Add(queryRangedLongerYearsRecords, Occur.MUST);
        //andQuery.Add(query, Occur.MUST);

        var searchResults = searcher.Search(andQuery, 300);
        var hits = searchResults.ScoreDocs;

        //var searchResults = searcher.Search(andQuery, 500);

        this.searchCount = hits.Length;

        foreach (var hit in hits)
        {
            var foundDoc = searcher.Doc(hit.Doc);
            var yearsPlayed = foundDoc.GetField("YearsPlayed").GetSingleValue();

            //if (yearsPlayed > 100)
            //{
            var name = foundDoc.GetField("FullPlayerName").GetStringValue();
            var lastYearPlayed = foundDoc.GetField("LastYearPlayed").GetSingleValue();

            var player = new BaseballPlayer { FullPlayerName = name, YearsPlayed = (int)yearsPlayed, LastYearPlayed = (int) lastYearPlayed };
            players.Add(player);
            //}

            //var explanation = searcher.Explain(query, hit.Doc);

            //Console.WriteLine("Found: " + name + " - " + hit.Score);
            //Console.WriteLine("Explanation: " + explanation.ToString());

            //var score = hit.Score;
        }
    }

    private async Task<IEnumerable<BaseballPlayer>> SearchBaseballPlayers(string searchText)
    {
        var baseBallPlayers = new List<BaseballPlayer>();

        BooleanQuery andQuery = new BooleanQuery();

        if (String.IsNullOrEmpty(searchText))
        {
            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(queryRangedLongerYearsRecords, Occur.MUST);
        }
        else
        {
            QueryParser fullPlayerNameParser = new QueryParser(Lucene.Net.Util.LuceneVersion.LUCENE_48, "FullPlayerName", analyzer);
            var query = fullPlayerNameParser.Parse(searchText + "*");

            andQuery.Add(queryRangedMaxRecords, Occur.MUST);
            andQuery.Add(query, Occur.MUST);
        }

        var searchResults = searcher.Search(andQuery, 50);
        var hits = searchResults.ScoreDocs;

        foreach (var hit in hits)
        {
            var foundDoc = searcher.Doc(hit.Doc);

            var yearsPlayed = foundDoc.GetField("YearsPlayed").GetSingleValue();
            var name = foundDoc.GetField("FullPlayerName").GetStringValue();
            var lastYearPlayed = foundDoc.GetField("LastYearPlayed").GetSingleValue();

            var player = new BaseballPlayer { FullPlayerName = name, YearsPlayed = (int)yearsPlayed, LastYearPlayed = (int) lastYearPlayed };
            baseBallPlayers.Add(player);
        }

        return await Task.FromResult(baseBallPlayers.OrderByDescending(a => a.YearsPlayed).Select(a => a));
    }
}
